#!perl

package Metadata;

use base qw(DBIx::ORMapper::DM::DataSource::Table);

__PACKAGE__->attr('id', 'Integer');
__PACKAGE__->attr('version', 'Integer');

__PACKAGE__->table('metadata');
__PACKAGE__->primary_key('id');

1;

package main;

use strict;
use warnings;

use Getopt::Long;
use Exception::Class;
use YAML;
use Data::Dumper;

use DBIx::ORMapper;
use DBIx::ORMapper::DM;
use DBIx::ORMapper::Migration;

my %opts = ();
GetOptions(\%opts, "config=s", "up", "down");

if(! exists $opts{config}) {
   print STDERR "--config parameter not defined. Using default conf/migration.yml.\n";
   $opts{config} = "conf/migration.yml";
}

if(! -f $opts{config}) {
   print STDERR "Configuration not found.\n";
   print STDERR "Pleae create a configuration file.\n";

   exit 1;
}

if(! exists $opts{up} && ! exists $opts{down}) {
   $opts{up} = 1;
}

my $content = eval { local(@ARGV, $/) = ($opts{config}); <>; };
my $conf = {};

if($opts{config} =~ m/\.yml$/) {
   $conf = Load($content);
}
else {
   $conf  = eval 'package DBIx::ORMapper::Migration::Config::Loader;'
                        . "no warnings; $content";

   die "Couldn't load configuration file: $@" if(!$conf && $@);
   die "Config file invalid. Did not return HASH reference." if( ref($conf) ne "HASH" );

   $conf->{directory} = $conf->{database}->{migration_directory};
}

if(! exists $conf->{database}) {
   print STDERR "No Database configured.\n";
   print STDERR "You have to configure your database.\n";

   exit 2;
}

my $url = $conf->{database}->{type} . "://" 
               . $conf->{database}->{host}
               . "/"
               . $conf->{database}->{schema}
               . "?username="
               . $conf->{database}->{username}
               . "&password="
               . $conf->{database}->{password};

if(exists $conf->{database}->{utf8} && $conf->{database}->{utf8}) {
   $url .= "&characterEncoding=UTF-8";
}

my $db_class = "DBIx::ORMapper::Adapter::" . $conf->{database}->{type};
eval "use $db_class;";
if($@) {
   print STDERR "Failed loading $db_class\n";
   exit 3;
}

DBIx::ORMapper::setup(default => $url);

eval {
   $::db = DBIx::ORMapper::get_connection("default");
   $::db->connect;

   Metadata->set_data_source($::db);
};

my $e;
if($e = Exception::Class->caught()) {
   print STDERR $e->error . "\n";
   print STDERR $e->trace->as_string . "\n";
   exit 5;
}

opendir(my $dir, $conf->{directory}) or die($!);
my @content = ();
while(my $entry = readdir($dir)) {
   next if($entry =~ m/^\./);
   push @content, $entry;
}
closedir($dir);

# check if metadata table exists
my $migr_state;
eval {
   $migr_state = Metadata->all(Metadata->id == 1)->next;
} or do {
   eval {
      my $tbl = DBIx::ORMapper::Migration::Table->new;
      $tbl->name("metadata");
      $tbl->integer("id");
      $tbl->integer("version");
      $tbl->primary_key("id");

      my $stmt = $tbl->get_statement;
      $stmt->execute;

      $migr_state = Metadata->new(
         id => 1,
         version => 0,
      );
      $migr_state->save;

      return 1;

   } or do {
      print STDERR "Can't create metadata table. This table is needed to track the migrations.\n$@\n";
      exit 6;
   };
};

my @sorted;

if($opts{up}) {
   print "  -- Running up()\n";
   @sorted = sort { $a cmp $b } @content;
}
elsif($opts{down}) {
   print "  -- Running down()\n";
   @sorted = sort { $b cmp $a } @content;
}

for my $entry (@sorted) {
   my ($num, $name) = split(/_/, $entry, 2);

   $name =~ s/\.p[lm]$//;

   require $conf->{directory} . "/" . $entry;
   my $klass = $name->new;

   if($opts{up}) {
      if(int($num) <= $migr_state->version) {
         next;
      }

      print "     [$num] $name\n";
      eval {
         $klass->up;
         $migr_state->version = int($num);
         $migr_state->update;
      } or do {
         print STDERR "ERR: $@\n";
      };
   }

   elsif($opts{down}) {
      if(int($num) > $migr_state->version) {
         next;
      }

      print "     [$num] $name\n";
      eval {
         $klass->down;
         $migr_state->version = int($num)-1;
         $migr_state->update;
      };
   }

}



